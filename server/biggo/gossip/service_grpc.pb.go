// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: service.proto

package gossip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterClient interface {
	GetMyClusterInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClusterInfoReply, error)
	GetClusterStats(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClusterStatsReply, error)
	SendClusterMessageToNode(ctx context.Context, in *ClusterMessage, opts ...grpc.CallOption) (*Void, error)
	GetLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogReply, error)
	QueryLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*QueryLogReply, error)
	GetPluginStatuses(ctx context.Context, in *Void, opts ...grpc.CallOption) (*PluginStatusReply, error)
	ConfigChanged(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*Void, error)
	WebConnCountForUser(ctx context.Context, in *WebsocketCountForUserRequest, opts ...grpc.CallOption) (*WebsocketCountForUserReply, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) GetMyClusterInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClusterInfoReply, error) {
	out := new(ClusterInfoReply)
	err := c.cc.Invoke(ctx, "/gossip.Cluster/GetMyClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetClusterStats(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClusterStatsReply, error) {
	out := new(ClusterStatsReply)
	err := c.cc.Invoke(ctx, "/gossip.Cluster/GetClusterStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) SendClusterMessageToNode(ctx context.Context, in *ClusterMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/gossip.Cluster/SendClusterMessageToNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := c.cc.Invoke(ctx, "/gossip.Cluster/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) QueryLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*QueryLogReply, error) {
	out := new(QueryLogReply)
	err := c.cc.Invoke(ctx, "/gossip.Cluster/QueryLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetPluginStatuses(ctx context.Context, in *Void, opts ...grpc.CallOption) (*PluginStatusReply, error) {
	out := new(PluginStatusReply)
	err := c.cc.Invoke(ctx, "/gossip.Cluster/GetPluginStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ConfigChanged(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/gossip.Cluster/ConfigChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) WebConnCountForUser(ctx context.Context, in *WebsocketCountForUserRequest, opts ...grpc.CallOption) (*WebsocketCountForUserReply, error) {
	out := new(WebsocketCountForUserReply)
	err := c.cc.Invoke(ctx, "/gossip.Cluster/WebConnCountForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
// All implementations must embed UnimplementedClusterServer
// for forward compatibility
type ClusterServer interface {
	GetMyClusterInfo(context.Context, *Void) (*ClusterInfoReply, error)
	GetClusterStats(context.Context, *Void) (*ClusterStatsReply, error)
	SendClusterMessageToNode(context.Context, *ClusterMessage) (*Void, error)
	GetLogs(context.Context, *LogRequest) (*LogReply, error)
	QueryLogs(context.Context, *LogRequest) (*QueryLogReply, error)
	GetPluginStatuses(context.Context, *Void) (*PluginStatusReply, error)
	ConfigChanged(context.Context, *ConfigUpdateRequest) (*Void, error)
	WebConnCountForUser(context.Context, *WebsocketCountForUserRequest) (*WebsocketCountForUserReply, error)
	mustEmbedUnimplementedClusterServer()
}

// UnimplementedClusterServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (UnimplementedClusterServer) GetMyClusterInfo(context.Context, *Void) (*ClusterInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyClusterInfo not implemented")
}
func (UnimplementedClusterServer) GetClusterStats(context.Context, *Void) (*ClusterStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStats not implemented")
}
func (UnimplementedClusterServer) SendClusterMessageToNode(context.Context, *ClusterMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClusterMessageToNode not implemented")
}
func (UnimplementedClusterServer) GetLogs(context.Context, *LogRequest) (*LogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedClusterServer) QueryLogs(context.Context, *LogRequest) (*QueryLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLogs not implemented")
}
func (UnimplementedClusterServer) GetPluginStatuses(context.Context, *Void) (*PluginStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginStatuses not implemented")
}
func (UnimplementedClusterServer) ConfigChanged(context.Context, *ConfigUpdateRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigChanged not implemented")
}
func (UnimplementedClusterServer) WebConnCountForUser(context.Context, *WebsocketCountForUserRequest) (*WebsocketCountForUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebConnCountForUser not implemented")
}
func (UnimplementedClusterServer) mustEmbedUnimplementedClusterServer() {}

// UnsafeClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServer will
// result in compilation errors.
type UnsafeClusterServer interface {
	mustEmbedUnimplementedClusterServer()
}

func RegisterClusterServer(s grpc.ServiceRegistrar, srv ClusterServer) {
	s.RegisterService(&Cluster_ServiceDesc, srv)
}

func _Cluster_GetMyClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetMyClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Cluster/GetMyClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetMyClusterInfo(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetClusterStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetClusterStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Cluster/GetClusterStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetClusterStats(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_SendClusterMessageToNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).SendClusterMessageToNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Cluster/SendClusterMessageToNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).SendClusterMessageToNode(ctx, req.(*ClusterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Cluster/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetLogs(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_QueryLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).QueryLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Cluster/QueryLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).QueryLogs(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetPluginStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetPluginStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Cluster/GetPluginStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetPluginStatuses(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ConfigChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ConfigChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Cluster/ConfigChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ConfigChanged(ctx, req.(*ConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_WebConnCountForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsocketCountForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).WebConnCountForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Cluster/WebConnCountForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).WebConnCountForUser(ctx, req.(*WebsocketCountForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cluster_ServiceDesc is the grpc.ServiceDesc for Cluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gossip.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMyClusterInfo",
			Handler:    _Cluster_GetMyClusterInfo_Handler,
		},
		{
			MethodName: "GetClusterStats",
			Handler:    _Cluster_GetClusterStats_Handler,
		},
		{
			MethodName: "SendClusterMessageToNode",
			Handler:    _Cluster_SendClusterMessageToNode_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _Cluster_GetLogs_Handler,
		},
		{
			MethodName: "QueryLogs",
			Handler:    _Cluster_QueryLogs_Handler,
		},
		{
			MethodName: "GetPluginStatuses",
			Handler:    _Cluster_GetPluginStatuses_Handler,
		},
		{
			MethodName: "ConfigChanged",
			Handler:    _Cluster_ConfigChanged_Handler,
		},
		{
			MethodName: "WebConnCountForUser",
			Handler:    _Cluster_WebConnCountForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
