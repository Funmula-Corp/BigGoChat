// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cluster_GetClusterInfos_FullMethodName          = "/proto.Cluster/GetClusterInfos"
	Cluster_SendClusterMessageToNode_FullMethodName = "/proto.Cluster/SendClusterMessageToNode"
	Cluster_GetClusterStats_FullMethodName          = "/proto.Cluster/GetClusterStats"
	Cluster_GetPluginStatuses_FullMethodName        = "/proto.Cluster/GetPluginStatuses"
	Cluster_ConfigChanged_FullMethodName            = "/proto.Cluster/ConfigChanged"
	Cluster_WebConnCountForUser_FullMethodName      = "/proto.Cluster/WebConnCountForUser"
	Cluster_GetLogs_FullMethodName                  = "/proto.Cluster/GetLogs"
	Cluster_QueryLogs_FullMethodName                = "/proto.Cluster/QueryLogs"
)

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterClient interface {
	GetClusterInfos(ctx context.Context, in *GetClusterInfosRequest, opts ...grpc.CallOption) (*GetClusterInfosReply, error)
	SendClusterMessageToNode(ctx context.Context, in *SendClusterMessageToNodeRequest, opts ...grpc.CallOption) (*SendClusterMessageToNodeReply, error)
	GetClusterStats(ctx context.Context, in *GetClusterStatsRequest, opts ...grpc.CallOption) (*GetClusterStatsReply, error)
	GetPluginStatuses(ctx context.Context, in *GetPluginStatusesRequest, opts ...grpc.CallOption) (*GetPluginStatusesReply, error)
	ConfigChanged(ctx context.Context, in *ConfigChangedRequest, opts ...grpc.CallOption) (*ConfigChangedReply, error)
	WebConnCountForUser(ctx context.Context, in *WebConnCountForUserRequest, opts ...grpc.CallOption) (*WebConnCountForUserReply, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsReply, error)
	QueryLogs(ctx context.Context, in *QueryLogsRequest, opts ...grpc.CallOption) (*QueryLogsReply, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) GetClusterInfos(ctx context.Context, in *GetClusterInfosRequest, opts ...grpc.CallOption) (*GetClusterInfosReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterInfosReply)
	err := c.cc.Invoke(ctx, Cluster_GetClusterInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) SendClusterMessageToNode(ctx context.Context, in *SendClusterMessageToNodeRequest, opts ...grpc.CallOption) (*SendClusterMessageToNodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendClusterMessageToNodeReply)
	err := c.cc.Invoke(ctx, Cluster_SendClusterMessageToNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetClusterStats(ctx context.Context, in *GetClusterStatsRequest, opts ...grpc.CallOption) (*GetClusterStatsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterStatsReply)
	err := c.cc.Invoke(ctx, Cluster_GetClusterStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetPluginStatuses(ctx context.Context, in *GetPluginStatusesRequest, opts ...grpc.CallOption) (*GetPluginStatusesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPluginStatusesReply)
	err := c.cc.Invoke(ctx, Cluster_GetPluginStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ConfigChanged(ctx context.Context, in *ConfigChangedRequest, opts ...grpc.CallOption) (*ConfigChangedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigChangedReply)
	err := c.cc.Invoke(ctx, Cluster_ConfigChanged_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) WebConnCountForUser(ctx context.Context, in *WebConnCountForUserRequest, opts ...grpc.CallOption) (*WebConnCountForUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebConnCountForUserReply)
	err := c.cc.Invoke(ctx, Cluster_WebConnCountForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogsReply)
	err := c.cc.Invoke(ctx, Cluster_GetLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) QueryLogs(ctx context.Context, in *QueryLogsRequest, opts ...grpc.CallOption) (*QueryLogsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryLogsReply)
	err := c.cc.Invoke(ctx, Cluster_QueryLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
// All implementations must embed UnimplementedClusterServer
// for forward compatibility.
type ClusterServer interface {
	GetClusterInfos(context.Context, *GetClusterInfosRequest) (*GetClusterInfosReply, error)
	SendClusterMessageToNode(context.Context, *SendClusterMessageToNodeRequest) (*SendClusterMessageToNodeReply, error)
	GetClusterStats(context.Context, *GetClusterStatsRequest) (*GetClusterStatsReply, error)
	GetPluginStatuses(context.Context, *GetPluginStatusesRequest) (*GetPluginStatusesReply, error)
	ConfigChanged(context.Context, *ConfigChangedRequest) (*ConfigChangedReply, error)
	WebConnCountForUser(context.Context, *WebConnCountForUserRequest) (*WebConnCountForUserReply, error)
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsReply, error)
	QueryLogs(context.Context, *QueryLogsRequest) (*QueryLogsReply, error)
	mustEmbedUnimplementedClusterServer()
}

// UnimplementedClusterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterServer struct{}

func (UnimplementedClusterServer) GetClusterInfos(context.Context, *GetClusterInfosRequest) (*GetClusterInfosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfos not implemented")
}
func (UnimplementedClusterServer) SendClusterMessageToNode(context.Context, *SendClusterMessageToNodeRequest) (*SendClusterMessageToNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClusterMessageToNode not implemented")
}
func (UnimplementedClusterServer) GetClusterStats(context.Context, *GetClusterStatsRequest) (*GetClusterStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStats not implemented")
}
func (UnimplementedClusterServer) GetPluginStatuses(context.Context, *GetPluginStatusesRequest) (*GetPluginStatusesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginStatuses not implemented")
}
func (UnimplementedClusterServer) ConfigChanged(context.Context, *ConfigChangedRequest) (*ConfigChangedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigChanged not implemented")
}
func (UnimplementedClusterServer) WebConnCountForUser(context.Context, *WebConnCountForUserRequest) (*WebConnCountForUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebConnCountForUser not implemented")
}
func (UnimplementedClusterServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedClusterServer) QueryLogs(context.Context, *QueryLogsRequest) (*QueryLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLogs not implemented")
}
func (UnimplementedClusterServer) mustEmbedUnimplementedClusterServer() {}
func (UnimplementedClusterServer) testEmbeddedByValue()                 {}

// UnsafeClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServer will
// result in compilation errors.
type UnsafeClusterServer interface {
	mustEmbedUnimplementedClusterServer()
}

func RegisterClusterServer(s grpc.ServiceRegistrar, srv ClusterServer) {
	// If the following call pancis, it indicates UnimplementedClusterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cluster_ServiceDesc, srv)
}

func _Cluster_GetClusterInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetClusterInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_GetClusterInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetClusterInfos(ctx, req.(*GetClusterInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_SendClusterMessageToNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendClusterMessageToNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).SendClusterMessageToNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_SendClusterMessageToNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).SendClusterMessageToNode(ctx, req.(*SendClusterMessageToNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetClusterStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetClusterStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_GetClusterStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetClusterStats(ctx, req.(*GetClusterStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetPluginStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetPluginStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_GetPluginStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetPluginStatuses(ctx, req.(*GetPluginStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ConfigChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ConfigChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_ConfigChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ConfigChanged(ctx, req.(*ConfigChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_WebConnCountForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebConnCountForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).WebConnCountForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_WebConnCountForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).WebConnCountForUser(ctx, req.(*WebConnCountForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_QueryLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).QueryLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_QueryLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).QueryLogs(ctx, req.(*QueryLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cluster_ServiceDesc is the grpc.ServiceDesc for Cluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterInfos",
			Handler:    _Cluster_GetClusterInfos_Handler,
		},
		{
			MethodName: "SendClusterMessageToNode",
			Handler:    _Cluster_SendClusterMessageToNode_Handler,
		},
		{
			MethodName: "GetClusterStats",
			Handler:    _Cluster_GetClusterStats_Handler,
		},
		{
			MethodName: "GetPluginStatuses",
			Handler:    _Cluster_GetPluginStatuses_Handler,
		},
		{
			MethodName: "ConfigChanged",
			Handler:    _Cluster_ConfigChanged_Handler,
		},
		{
			MethodName: "WebConnCountForUser",
			Handler:    _Cluster_WebConnCountForUser_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _Cluster_GetLogs_Handler,
		},
		{
			MethodName: "QueryLogs",
			Handler:    _Cluster_QueryLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
