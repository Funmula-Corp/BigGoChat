// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: plugin.proto

package pluginAPI

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginAPIClient is the client API for PluginAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginAPIClient interface {
	GetUserIdByAuthData(ctx context.Context, in *UserIdByAuthDataRequest, opts ...grpc.CallOption) (*UserIdByAuthDataReply, error)
}

type pluginAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginAPIClient(cc grpc.ClientConnInterface) PluginAPIClient {
	return &pluginAPIClient{cc}
}

func (c *pluginAPIClient) GetUserIdByAuthData(ctx context.Context, in *UserIdByAuthDataRequest, opts ...grpc.CallOption) (*UserIdByAuthDataReply, error) {
	out := new(UserIdByAuthDataReply)
	err := c.cc.Invoke(ctx, "/pluginAPI.PluginAPI/GetUserIdByAuthData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginAPIServer is the server API for PluginAPI service.
// All implementations must embed UnimplementedPluginAPIServer
// for forward compatibility
type PluginAPIServer interface {
	GetUserIdByAuthData(context.Context, *UserIdByAuthDataRequest) (*UserIdByAuthDataReply, error)
	mustEmbedUnimplementedPluginAPIServer()
}

// UnimplementedPluginAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPluginAPIServer struct {
}

func (UnimplementedPluginAPIServer) GetUserIdByAuthData(context.Context, *UserIdByAuthDataRequest) (*UserIdByAuthDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdByAuthData not implemented")
}
func (UnimplementedPluginAPIServer) mustEmbedUnimplementedPluginAPIServer() {}

// UnsafePluginAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginAPIServer will
// result in compilation errors.
type UnsafePluginAPIServer interface {
	mustEmbedUnimplementedPluginAPIServer()
}

func RegisterPluginAPIServer(s grpc.ServiceRegistrar, srv PluginAPIServer) {
	s.RegisterService(&PluginAPI_ServiceDesc, srv)
}

func _PluginAPI_GetUserIdByAuthData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdByAuthDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginAPIServer).GetUserIdByAuthData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginAPI.PluginAPI/GetUserIdByAuthData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginAPIServer).GetUserIdByAuthData(ctx, req.(*UserIdByAuthDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginAPI_ServiceDesc is the grpc.ServiceDesc for PluginAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginAPI.PluginAPI",
	HandlerType: (*PluginAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserIdByAuthData",
			Handler:    _PluginAPI_GetUserIdByAuthData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
