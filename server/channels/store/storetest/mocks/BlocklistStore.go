// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "git.biggo.com/Funmula/mattermost-funmula/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// BlocklistStore is an autogenerated mock type for the BlocklistStore type
type BlocklistStore struct {
	mock.Mock
}

// DeleteChannelBlockUser provides a mock function with given fields: channelId, userId
func (_m *BlocklistStore) DeleteChannelBlockUser(channelId string, userId string) error {
	ret := _m.Called(channelId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelBlockUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserBlockUser provides a mock function with given fields: userId, blockedId
func (_m *BlocklistStore) DeleteUserBlockUser(userId string, blockedId string) error {
	ret := _m.Called(userId, blockedId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserBlockUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, blockedId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChannelBlockUser provides a mock function with given fields: channelId, userId
func (_m *BlocklistStore) GetChannelBlockUser(channelId string, userId string) (*model.ChannelBlockUser, error) {
	ret := _m.Called(channelId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelBlockUser")
	}

	var r0 *model.ChannelBlockUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ChannelBlockUser, error)); ok {
		return rf(channelId, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ChannelBlockUser); ok {
		r0 = rf(channelId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChannelBlockUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBlockUser provides a mock function with given fields: userId, blockedId
func (_m *BlocklistStore) GetUserBlockUser(userId string, blockedId string) (*model.UserBlockUser, error) {
	ret := _m.Called(userId, blockedId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBlockUser")
	}

	var r0 *model.UserBlockUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.UserBlockUser, error)); ok {
		return rf(userId, blockedId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.UserBlockUser); ok {
		r0 = rf(userId, blockedId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserBlockUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, blockedId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelBlockUsers provides a mock function with given fields: channelId
func (_m *BlocklistStore) ListChannelBlockUsers(channelId string) (*model.ChannelBlockUserList, error) {
	ret := _m.Called(channelId)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelBlockUsers")
	}

	var r0 *model.ChannelBlockUserList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ChannelBlockUserList, error)); ok {
		return rf(channelId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ChannelBlockUserList); ok {
		r0 = rf(channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChannelBlockUserList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelBlockUsersByBlockedUser provides a mock function with given fields: blockedId
func (_m *BlocklistStore) ListChannelBlockUsersByBlockedUser(blockedId string) (*model.ChannelBlockUserList, error) {
	ret := _m.Called(blockedId)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelBlockUsersByBlockedUser")
	}

	var r0 *model.ChannelBlockUserList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ChannelBlockUserList, error)); ok {
		return rf(blockedId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ChannelBlockUserList); ok {
		r0 = rf(blockedId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChannelBlockUserList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blockedId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserBlockUsers provides a mock function with given fields: userId
func (_m *BlocklistStore) ListUserBlockUsers(userId string) (*model.UserBlockUserList, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for ListUserBlockUsers")
	}

	var r0 *model.UserBlockUserList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.UserBlockUserList, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.UserBlockUserList); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserBlockUserList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserBlockUsersByBlockedUser provides a mock function with given fields: blockedId
func (_m *BlocklistStore) ListUserBlockUsersByBlockedUser(blockedId string) (*model.UserBlockUserList, error) {
	ret := _m.Called(blockedId)

	if len(ret) == 0 {
		panic("no return value specified for ListUserBlockUsersByBlockedUser")
	}

	var r0 *model.UserBlockUserList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.UserBlockUserList, error)); ok {
		return rf(blockedId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.UserBlockUserList); ok {
		r0 = rf(blockedId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserBlockUserList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blockedId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveChannelBlockUser provides a mock function with given fields: blockUser
func (_m *BlocklistStore) SaveChannelBlockUser(blockUser *model.ChannelBlockUser) (*model.ChannelBlockUser, error) {
	ret := _m.Called(blockUser)

	if len(ret) == 0 {
		panic("no return value specified for SaveChannelBlockUser")
	}

	var r0 *model.ChannelBlockUser
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ChannelBlockUser) (*model.ChannelBlockUser, error)); ok {
		return rf(blockUser)
	}
	if rf, ok := ret.Get(0).(func(*model.ChannelBlockUser) *model.ChannelBlockUser); ok {
		r0 = rf(blockUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChannelBlockUser)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ChannelBlockUser) error); ok {
		r1 = rf(blockUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserBlockUser provides a mock function with given fields: userBlockUser
func (_m *BlocklistStore) SaveUserBlockUser(userBlockUser *model.UserBlockUser) (*model.UserBlockUser, error) {
	ret := _m.Called(userBlockUser)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserBlockUser")
	}

	var r0 *model.UserBlockUser
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.UserBlockUser) (*model.UserBlockUser, error)); ok {
		return rf(userBlockUser)
	}
	if rf, ok := ret.Get(0).(func(*model.UserBlockUser) *model.UserBlockUser); ok {
		r0 = rf(userBlockUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserBlockUser)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.UserBlockUser) error); ok {
		r1 = rf(userBlockUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlocklistStore creates a new instance of BlocklistStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlocklistStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlocklistStore {
	mock := &BlocklistStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
